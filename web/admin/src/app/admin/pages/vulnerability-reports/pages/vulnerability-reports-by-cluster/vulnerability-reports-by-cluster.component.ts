import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, OnInit, Output } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { MessageService } from 'primeng/api';
import { Observable, catchError, finalize, share, tap } from 'rxjs';
import { VulnerabilityReportsView } from '../../../../../core/models/vulnerabilityReport';
import { VulnerabilityReportsService } from '../../../../../core/services/vulnerability-reports.service';
import { EnvironmentService } from '../../../../../core/services/environment.service';

@Component({
  selector: 'app-vulnerability-reports-by-cluster',
  templateUrl: './vulnerability-reports-by-cluster.component.html',
  styleUrls: ['./vulnerability-reports-by-cluster.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class VulnerabilityReportsByClusterComponent implements OnInit {
  @Output() reports = new EventEmitter<any[]>();

  vulnerabilityReports$: Observable<VulnerabilityReportsView[] | undefined>;
  error: any;
  columns: any[];
  loading = false;

  environments = this.environmentService.getEnvironments();

  constructor(
    private changeDetector: ChangeDetectorRef,
    private translateService: TranslateService,
    private vulnerabilityReportsService: VulnerabilityReportsService,
    private messageService: MessageService,
    private environmentService: EnvironmentService,
  ) {}

  ngOnInit(): void {
    this.setupColumns();
    this.getVulnerabilityReports();
  }

  getVulnerabilityReports(): void {
    this.loading = true;
    this.vulnerabilityReports$ = undefined;
    this.error = undefined;
    this.vulnerabilityReports$ = this.vulnerabilityReportsService.getVulnerabilityReportsGlobal().pipe(
      share(),
      tap((reports) => {
        this.emitExport(reports);
      }),
      catchError((error) => {
        this.error = error;
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('pages.admin.vulnerabilityreports.clusterSummary.error'),
        });
        this.changeDetector.detectChanges();
        throw error;
      }),
      finalize(() => {
        this.loading = false;
        this.changeDetector.detectChanges();
      }),
    );
  }

  setupColumns(): void {
    this.columns = [
      { field: 'clusterId', type: 'text' },
      { field: 'project.name', type: 'text' },
      { field: 'environment', type: 'env' },
      { field: 'criticalCount', type: 'numeric' },
      { field: 'highCount', type: 'numeric' },
      { field: 'mediumCount', type: 'numeric' },
      { field: 'lowCount', type: 'numeric' },
    ];
  }

  emitExport(reports: VulnerabilityReportsView[]): void {
    const exportObjects: any[] = [];
    reports?.forEach((report) => {
      exportObjects.push({
        cluster: report?.clusterId,
        project: report?.project?.name,
        environment: report?.environment,
        criticalCount: report?.criticalCount,
        highCount: report?.highCount,
        mediumCount: report?.mediumCount,
        lowCount: report?.lowCount,
      });
    });
    this.reports.emit(exportObjects);
  }
}
