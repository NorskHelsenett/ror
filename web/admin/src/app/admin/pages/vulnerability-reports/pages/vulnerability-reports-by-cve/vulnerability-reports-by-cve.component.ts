import { environment } from './../../../../../../environments/environment';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, OnInit, Output } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { MessageService } from 'primeng/api';
import { Observable, catchError, finalize, tap } from 'rxjs';
import { ViewMetadata } from '../../../../../core/models/vulnerabilityReport';
import { VulnerabilityReportsService } from '../../../../../core/services/vulnerability-reports.service';
import { EnvironmentService } from '../../../../../core/services/environment.service';

@Component({
  selector: 'app-vulnerability-reports-by-cve',
  templateUrl: './vulnerability-reports-by-cve.component.html',
  styleUrls: ['./vulnerability-reports-by-cve.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class VulnerabilityReportsByCveComponent implements OnInit {
  @Output() reports = new EventEmitter<ViewMetadata[]>();
  vulnerabilityReports$: Observable<ViewMetadata[]>;
  columns: any[];
  id: string = '';
  error: any;
  loading: boolean = false;
  searchTimeStamp: string;
  environments = this.environmentService.getEnvironments();

  availableCriticalities = [
    {
      name: this.translateService.instant('pages.clusters.details.edit.form.availableCriticalities.1'),
      value: 1,
    },
    {
      name: this.translateService.instant('pages.clusters.details.edit.form.availableCriticalities.2'),
      value: 2,
    },
    {
      name: this.translateService.instant('pages.clusters.details.edit.form.availableCriticalities.3'),
      value: 3,
    },
    {
      name: this.translateService.instant('pages.clusters.details.edit.form.availableCriticalities.4'),
      value: 4,
    },
  ];

  availableSensitivities = [
    {
      name: this.translateService.instant('pages.clusters.details.edit.form.availableSensitivities.1'),
      value: 1,
    },
    {
      name: this.translateService.instant('pages.clusters.details.edit.form.availableSensitivities.2'),
      value: 2,
    },
    {
      name: this.translateService.instant('pages.clusters.details.edit.form.availableSensitivities.3'),
      value: 3,
    },
    {
      name: this.translateService.instant('pages.clusters.details.edit.form.availableSensitivities.4'),
      value: 4,
    },
  ];

  constructor(
    private changeDetector: ChangeDetectorRef,
    private messageService: MessageService,
    private translateService: TranslateService,
    private vulnerabilityReportsService: VulnerabilityReportsService,
    private environmentService: EnvironmentService,
  ) {}

  ngOnInit(): void {
    this.setupColumns();
  }

  setupColumns(): void {
    this.columns = [
      { field: 'clusterId', type: 'text' },
      { field: 'project.name', type: 'text' },
      { field: 'environment', type: 'env' },
      { field: 'criticality', type: 'criticality' },
      { field: 'sensitivity', type: 'sensitivity' },
    ];
  }

  getVulnerabilityReports(): void {
    const date: Date = new Date();
    this.searchTimeStamp = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
    this.loading = true;
    this.error = undefined;
    this.vulnerabilityReports$ = this.vulnerabilityReportsService.getVulnerabilityReportsByID(this.id).pipe(
      tap((reports) => {
        this.loading = false;
        this.emitExport(reports);
        this.changeDetector.detectChanges();
      }),
      catchError((error) => {
        this.error = error;
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('pages.admin.vulnerabilityreports.cveid.error'),
        });
        this.changeDetector.detectChanges();
        throw error;
      }),
      finalize(() => {
        this.loading = false;
        this.changeDetector.detectChanges();
      }),
    );
  }

  emitExport(reports: ViewMetadata[]): void {
    const exportObjects: any[] = [];
    reports?.forEach((report) => {
      exportObjects.push({
        cveiId: this.id,
        cluster: report?.clusterId,
        project: report?.project?.name,
        environment: report?.environment,
        criticality: report?.criticality,
        sensitivity: report?.sensitivity,
      });
    });
    this.reports.emit(exportObjects);
  }
}
