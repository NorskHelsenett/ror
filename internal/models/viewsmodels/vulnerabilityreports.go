package viewsmodels

import (
	"github.com/NorskHelsenett/ror/pkg/apicontracts"
	"github.com/NorskHelsenett/ror/pkg/apicontracts/apiresourcecontracts"
)

// Struct that defines the output for the Vulnerabilityreport view
type VulnerabilityReportsView struct {
	ClusterId                              string                              `json:"clusterId,omitempty"`
	Namespaces                             []VulnerabilityReportsViewNamespace `json:"namespaces,omitempty"`
	Environment                            string                              `json:"environment,omitempty"`
	Project                                apicontracts.Project                `json:"project,omitempty"`
	apiresourcecontracts.AquaReportSummary `bson:"inline"`
}
type VulnerabilityReportsViewNamespace struct {
	Name    string                           `json:"name,omitempty"`
	Reports []VulnerabilityReportsViewReport `json:"reports,omitempty"`
	apiresourcecontracts.AquaReportSummary
}

type VulnerabilityReportsViewReport struct {
	Uid             string                                                                `json:"uid,omitempty"`
	Name            string                                                                `json:"name,omitempty"`
	OwnerRef        apiresourcecontracts.ResourceMetadataOwnerReference                   `json:"owner_ref,omitempty"`
	Scanner         VulnerabilityReportsScanner                                           `json:"scanner,omitempty"`
	Artifact        VulnerabilityReportsArtifact                                          `json:"artifact,omitempty"`
	UpdateTimestamp string                                                                `json:"updateTimestamp"`
	Vulnerabilities []apiresourcecontracts.ResourceVulnerabilityReportReportVulnerability `json:"vulnerabilities,omitempty"`
	apiresourcecontracts.AquaReportSummary
}

type VulnerabilityReportsArtifact struct {
	Repository string `json:"repository,omitempty"`
	Tag        string `json:"tag,omitempty"`
}

type VulnerabilityReportsScanner struct {
	Name    string `json:"name,omitempty"`
	Vendor  string `json:"vendor,omitempty"`
	Version string `json:"version,omitempty"`
}

func (vr *VulnerabilityReportsView) ImportData(reports apiresourcecontracts.ResourceVulnerabilityreports) error {
	vr.ClusterId = reports.Owner.Subject
	for _, vulnerabilityreport := range reports.Vulnerabilityreports {
		namespace := vr.FindOrCreateVulnerabilityReportNamespace(vulnerabilityreport.Metadata.Namespace)
		_ = namespace.AddVulnerabilityreport(vulnerabilityreport)
	}
	vr.UpdateSummary()
	return nil
}

func (vr *VulnerabilityReportsView) FindOrCreateVulnerabilityReportNamespace(namespaceToReturn string) *VulnerabilityReportsViewNamespace {
	namespace := vr.ReturnVulnerabilityReportNamespace(namespaceToReturn)
	if namespace == nil {
		newNamespace := VulnerabilityReportsViewNamespace{
			Name: namespaceToReturn,
		}
		vr.Namespaces = append(vr.Namespaces, newNamespace)
		namespace = vr.ReturnVulnerabilityReportNamespace(namespaceToReturn)
	}

	return namespace
}

func (vr VulnerabilityReportsView) ReturnVulnerabilityReportNamespace(namespaceToReturn string) *VulnerabilityReportsViewNamespace {
	idx := vr.ReturnVulnerabilityReportNamespaceIdx(namespaceToReturn)
	if idx != -1 {
		return &vr.Namespaces[idx]
	}
	return nil
}

func (vr VulnerabilityReportsView) ReturnVulnerabilityReportNamespaceIdx(namespaceToReturn string) int {
	if len(vr.Namespaces) > 0 {
		for idx, namespace := range vr.Namespaces {
			if namespace.Name == namespaceToReturn {
				return idx
			}
		}
	}
	return -1
}

func (vrn *VulnerabilityReportsViewNamespace) AddVulnerabilityreport(report apiresourcecontracts.ResourceVulnerabilityReport) error {
	vrn.Name = report.Metadata.Namespace
	vulnerabilityreport := VulnerabilityReportsViewReport{
		Uid:  report.Metadata.Uid,
		Name: report.Metadata.Name,
		OwnerRef: apiresourcecontracts.ResourceMetadataOwnerReference{
			ApiVersion: report.Metadata.OwnerReferences[0].ApiVersion,
			Kind:       report.Metadata.OwnerReferences[0].Kind,
			Name:       report.Metadata.OwnerReferences[0].Name,
			Uid:        report.Metadata.OwnerReferences[0].Uid,
		},
		Scanner: VulnerabilityReportsScanner{
			Name:    report.Report.Scanner.Name,
			Vendor:  report.Report.Scanner.Vendor,
			Version: report.Report.Scanner.Version,
		},
		Artifact: VulnerabilityReportsArtifact{
			Repository: report.Report.Artifact.Repository,
			Tag:        report.Report.Artifact.Tag,
		},
		UpdateTimestamp:   report.Report.UpdateTimestamp,
		AquaReportSummary: report.Report.Summary,
	}
	vulnerabilityreport.Vulnerabilities = append(vulnerabilityreport.Vulnerabilities, report.Report.Vulnerabilities...)
	vrn.Reports = append(vrn.Reports, vulnerabilityreport)
	return nil
}
func (vr *VulnerabilityReportsView) UpdateSummary() {
	for i, namespace := range vr.Namespaces {
		for _, policy := range namespace.Reports {
			namespace.CriticalCount = namespace.CriticalCount + policy.CriticalCount
			namespace.HighCount = namespace.HighCount + policy.HighCount
			namespace.LowCount = namespace.LowCount + policy.LowCount
			namespace.MediumCount = namespace.MediumCount + policy.MediumCount
		}
		vr.Namespaces[i].CriticalCount = namespace.CriticalCount
		vr.Namespaces[i].HighCount = namespace.HighCount
		vr.Namespaces[i].LowCount = namespace.LowCount
		vr.Namespaces[i].MediumCount = namespace.MediumCount
		vr.Namespaces[i].Total = namespace.CriticalCount + namespace.HighCount + namespace.LowCount + namespace.MediumCount

		vr.CriticalCount = vr.CriticalCount + namespace.CriticalCount
		vr.HighCount = vr.HighCount + namespace.HighCount
		vr.LowCount = vr.LowCount + namespace.LowCount
		vr.MediumCount = vr.MediumCount + namespace.MediumCount
		vr.Total = vr.CriticalCount + vr.HighCount + vr.LowCount + vr.MediumCount
	}
}

type VulnerabilityById struct {
	CveId    string                      `json:"cveId"`
	Severity string                      `json:"severity"`
	Score    float32                     `json:"score"`
	Title    string                      `json:"title"`
	Link     string                      `json:"link"`
	Affected []VulnerabilityByIdAffected `json:"affected"`
}
type VulnerabilityByIdAffected struct {
	ClusterId        string                                                         `json:"clusterId"`
	Internal         bool                                                           `json:"internal"`
	Ownerref         []apiresourcecontracts.ResourceMetadataOwnerReference          `json:"ownerref"`
	Scanner          apiresourcecontracts.AquaReportScanner                         `json:"scanner"`
	Artifact         apiresourcecontracts.ResourceVulnerabilityReportReportArtifact `json:"artifact"`
	Resource         string                                                         `json:"resource"`
	InstalledVersion string                                                         `json:"installedVersion"`
	FixedVersion     string                                                         `json:"fixedVersion"`
}

func (v *VulnerabilityById) ImportData(data []VulnerabilityByIdDB) {

	if len(data) > 0 {
		v.CveId = data[0].Vulnerabilities.Vulnerabilityid
		v.Severity = data[0].Vulnerabilities.Severity
		v.Score = data[0].Vulnerabilities.Score
		v.Title = data[0].Vulnerabilities.Title
		v.Link = data[0].Vulnerabilities.Link

		for _, vuln := range data {
			affectedResource := VulnerabilityByIdAffected{}
			affectedResource.ClusterId = vuln.Owner.Subject
			affectedResource.Internal = vuln.Internal
			affectedResource.Ownerref = vuln.Ownerref
			affectedResource.Scanner = vuln.Scanner
			affectedResource.Artifact = vuln.Artifact
			affectedResource.Resource = vuln.Vulnerabilities.Resource
			affectedResource.FixedVersion = vuln.Vulnerabilities.FixedVersion
			affectedResource.InstalledVersion = vuln.Vulnerabilities.InstalledVersion
			v.Affected = append(v.Affected, affectedResource)
		}
	}
}

type VulnerabilityByIdDB struct {
	Owner           apiresourcecontracts.ResourceOwnerReference                    `bson:"owner"`
	Internal        bool                                                           `bson:"internal"`
	Ownerref        []apiresourcecontracts.ResourceMetadataOwnerReference          `bson:"ownerref"`
	Scanner         apiresourcecontracts.AquaReportScanner                         `bson:"scanner"`
	Artifact        apiresourcecontracts.ResourceVulnerabilityReportReportArtifact `bson:"artifact"`
	Vulnerabilities VulnerabilityByIdDBVulnerability                               `bson:"vulnerabilities"`
}
type VulnerabilityByIdDBVulnerability struct {
	Vulnerabilityid  string  `bson:"vulnerabilityid"`
	Severity         string  `bson:"severity"`
	Score            float32 `bson:"score"`
	Title            string  `bson:"title"`
	Resource         string  `bson:"resource"`
	Link             string  `bson:"link"`
	InstalledVersion string  `json:"installedVersion"`
	FixedVersion     string  `json:"fixedVersion"`
}

type GlobalVulnerabilityReportsViewById struct {
	ClusterId   string                        `json:"clusterId"`
	Environment string                        `json:"environment"`
	Criticality apicontracts.CriticalityLevel `json:"criticality"`
	Sensitivity apicontracts.SensitivityLevel `json:"sensitivity"`
	Project     apicontracts.Project          `json:"project"`
}
