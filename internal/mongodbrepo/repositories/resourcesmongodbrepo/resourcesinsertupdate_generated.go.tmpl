// THIS FILE IS GENERATED, DO NOT EDIT
// ref: build/generator/main.go

package resourcesmongodbrepo

import (
	"context"
	"errors"
	"fmt"
	"github.com/NorskHelsenett/ror/pkg/clients/mongodb"
	"github.com/NorskHelsenett/ror/pkg/rlog"
	"github.com/NorskHelsenett/ror/pkg/apicontracts/apiresourcecontracts"

	"go.mongodb.org/mongo-driver/bson"
)

{{ range .}}
// Creates resource entry of type apiresourcecontracts.ResourceModel[apiresourcecontracts.Resource{{.Kind}}]
func CreateResource{{.Kind}}(input apiresourcecontracts.ResourceModel[apiresourcecontracts.Resource{{.Kind}}], ctx context.Context) error {
	rlog.Debug("inserting resource",
		rlog.String("action", "insert"),
		rlog.String("apiverson", input.ApiVersion),
		rlog.String("kind", input.Kind),
		rlog.String("uid", input.Uid),
	)
	_, err := mongodb.InsertOne(ctx, ResourceCollectionName, input)
	if err != nil {
		msg := fmt.Sprintf("could not create resource %s/%s with uid %s", input.ApiVersion, input.Kind, input.Uid)
		rlog.Error(msg, err)
		return errors.New(msg)
	}
	return nil
}

{{end}}

{{ range .}}
// Updates resource entry of type apiresourcecontracts.ResourceModel[apiresourcecontracts.Resource{{.Kind}}] by uid
func UpdateResource{{.Kind}}(input apiresourcecontracts.ResourceModel[apiresourcecontracts.Resource{{.Kind}}], ctx context.Context) error {
	rlog.Debug("updating resource",
		rlog.String("action", "update"),
		rlog.String("api version", input.ApiVersion),
		rlog.String("kind", input.Kind),
		rlog.String("uid", input.Uid),
	)

	filter := bson.M{"uid": input.Uid}
	update := bson.M{"$set": input}
	_, err := mongodb.UpdateOne(ctx, ResourceCollectionName, filter, update)
	if err != nil {
		msg := fmt.Sprintf("could not update resource %s/%s with uid %s", input.ApiVersion, input.Kind, input.Uid)
		rlog.Error(msg, err)
		return errors.New(msg)
	}
	return nil
}

{{end}}

