package rortypes

import (
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type ResourceClusterVulnerabilityReport struct {
	Summary ResourceClusterVulnerabilityReportSummary           `json:"summary"`
	Report  map[string]ResourceClusterVulnerabilityReportReport `json:"report"`
}

type ResourceClusterVulnerabilityReportSummary struct {
	Critical int `json:"critical"`
	High     int `json:"high"`
	Medium   int `json:"medium"`
	Low      int `json:"low"`
	Unknown  int `json:"unknown"`
}

type ResourceClusterVulnerabilityReportReport struct {
	Severity      string                                          `json:"severity"`
	Score         float32                                         `json:"score"`
	Title         string                                          `json:"title"`
	Link          string                                          `json:"primaryLink"`
	FirstObserved time.Time                                       `json:"firstObserved"`
	LastObserved  time.Time                                       `json:"lastObserved"`
	Owners        []ResourceClusterVulnerabilityReportReportOwner `json:"owners"`
	Status        ResourceClusterVulnerabilityReportReportStatus  `json:"status"`
}

type ResourceClusterVulnerabilityReportReportOwner struct {
	Digest           string                  `json:"digest"`
	Repository       string                  `json:"repository"`
	Tag              string                  `json:"tag"`
	Resource         string                  `json:"resource"`
	InstalledVersion string                  `json:"installedVersion"`
	FixedVersion     string                  `json:"fixedVersion"`
	Namespace        string                  `json:"namespace"`
	OwnerReferences  []metav1.OwnerReference `json:"ownerReferences"`
}

type ResourceClusterVulnerabilityReportReportStatus struct {
	Status          VulnerabilityStatus          `json:"status"`
	Until           time.Time                    `json:"until,omitempty"`
	DismissalReason VulnerabilityDismissalReason `json:"reason,omitempty"`
	Comment         string                       `json:"comment,omitempty"`
	RiskAssessment  string                       `json:"riskAssessment,omitempty"`
}

type VulnerabilityStatus int

const (
	NOT_ASSESSED VulnerabilityStatus = iota
	NEEDS_TRIAGE
	CONFIRMED
	DISMISSED
)

var AllVulnerabilityStatuses = []VulnerabilityStatus{NOT_ASSESSED, NEEDS_TRIAGE, CONFIRMED, DISMISSED}

func (s VulnerabilityStatus) TSName() string {
	switch s {
	case NOT_ASSESSED:
		return "NOT_ASSESSED"
	case NEEDS_TRIAGE:
		return "NEEDS_TRIAGE"
	case CONFIRMED:
		return "CONFIRMED"
	case DISMISSED:
		return "DISMISSED"
	default:
		return "UNDEFINED"
	}
}

type VulnerabilityDismissalReason int

const (
	ACCEPTABLE_RISK VulnerabilityDismissalReason = iota
	FALSE_POSITIVE
	NOT_APPLICABLE
)

var AllVulnerabilityDismissalReasons = []VulnerabilityDismissalReason{ACCEPTABLE_RISK, FALSE_POSITIVE, NOT_APPLICABLE}

func (s VulnerabilityDismissalReason) TSName() string {
	switch s {
	case ACCEPTABLE_RISK:
		return "ACCEPTABLE_RISK"
	case FALSE_POSITIVE:
		return "FALSE_POSITIVE"
	case NOT_APPLICABLE:
		return "NOT_APPLICABLE"
	default:
		return "UNDEFINED"
	}
}
