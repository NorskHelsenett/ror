package rorresources

import (
	"github.com/NorskHelsenett/ror/pkg/rlog"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// NewResourceSetFromStruct creates a new ResourceSet from a struct of the type ResourceSet
// the function restores common methods after transit eg by json.
func NewResourceSetFromStruct(in ResourceSet) *ResourceSet {
	out := ResourceSet{}
	if len(in.Resources) == 0 {
		rlog.Warn("ResourceSet has no resources")
		return &out
	}

	if in.query == nil {
		in.query = &ResourceQuery{}
	}

	query := *in.query

	out.query = &query

	for _, res := range in.Resources {
		r := NewResourceFromStruct(*res)
		out.Add(r)
	}
	return &out

}

func NewResourceFromStruct(res Resource) *Resource {

		r := NewRorResource(res.Kind, res.APIVersion)
	    r.CommonResource = res.CommonResource

		gvk := schema.FromAPIVersionAndKind(res.APIVersion, res.Kind)
		switch gvk.String() {
{{ range .}}

		case "{{.GroupVersionKind.String }}":
			r.Set{{.Kind}}(res.{{.Kind}}Resource)
			r.SetCommonInterface(res.{{.Kind}}Resource)
{{end}}
		default:
			rlog.Info("Unknown resource kind", rlog.String("gvk", gvk.String()), rlog.String("kind", res.Kind), rlog.String("apiVersion", res.APIVersion))
			return nil
		}
	return r
}
