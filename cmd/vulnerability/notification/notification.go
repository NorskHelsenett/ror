package notification

import (
	"context"
	"fmt"
	"os"
	"slices"
	"strings"

	"github.com/NorskHelsenett/ror/cmd/vulnerability/ror"
	"github.com/NorskHelsenett/ror/pkg/rorresources"
	"github.com/NorskHelsenett/ror/pkg/rorresources/rortypes"
	"github.com/google/uuid"
	"k8s.io/apimachinery/pkg/types"
)

type Vulnerability struct {
	Id       string
	Severity string
	Title    string
}

const (
	apiVersion = "general.ror.internal/v1alpha1"
	kind       = "VulnerabilityEvent"
)

var rorWebUrl = "https://ror.sky.test.nhn.no"

func init() {
	url := os.Getenv("ROR_WEB_URL")
	if url != "" {
		rorWebUrl = url
	}
}

func CreateVulnerabilityEvent(ctx context.Context, vulnerabilites []Vulnerability, summary rortypes.ResourceClusterVulnerabilityReportSummary, owner rortypes.RorResourceOwnerReference) error {
	message := createMessage(vulnerabilites, summary, owner)

	vulnerabilityEvent := rortypes.ResourceVulnerabilityEvent{}
	vulnerabilityEvent.Spec.Message = message
	vulnerabilityEvent.Spec.Owner = owner

	resource := rorresources.NewRorResource(kind, apiVersion)
	resource.SetVulnerabilityEvent(&vulnerabilityEvent)
	resource.RorMeta.Action = rortypes.K8sActionAdd
	resource.RorMeta.Ownerref = owner
	resource.Metadata.UID = types.UID(uuid.NewString())

	resourceSet := rorresources.NewResourceSet()
	resourceSet.Add(resource)

	_, err := ror.Client.ResourceV2().Update(ctx, *resourceSet)
	if err != nil {
		return fmt.Errorf("unable to create vulnerability event resource in ror api: %w", err)
	}
	return nil
}

func createMessage(vulnerabilites []Vulnerability, summary rortypes.ResourceClusterVulnerabilityReportSummary, owner rortypes.RorResourceOwnerReference) string {
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("%d nye sårbarheter oppdaget i %s %s\n\nNye:\n", len(vulnerabilites), owner.Scope, owner.Subject))
	slices.SortFunc(vulnerabilites, func(a, b Vulnerability) int {
		if a.Severity == "LOW" {
			return 1
		}
		if b.Severity == "LOW" {
			return -1
		}
		return strings.Compare(a.Severity, b.Severity)
	})

	n := 0
	for _, v := range vulnerabilites {
		if n < 10 {
			sb.WriteString(fmt.Sprintf("%s\t%s\t%s\n", v.Id, v.Severity, v.Title))
			n++
		} else {
			sb.WriteString("...\n")
			break
		}
	}
	sb.WriteString(fmt.Sprintf("\nOppsummering:\nKritisk: %d\nHøy: %d\nMedium: %d\nLav: %d\n\n", summary.Critical, summary.High, summary.Medium, summary.Low))
	sb.WriteString(fmt.Sprintf("Se full oversikt og mer informasjon i <%s/%s/%s?tab=vulnerabilityReports|ROR>", rorWebUrl, owner.Scope, owner.Subject))
	return sb.String()
}
