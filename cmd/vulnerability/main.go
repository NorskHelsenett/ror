package main

import (
	"fmt"
	"github.com/NorskHelsenett/ror/cmd/vulnerability/httpserver"
	"github.com/NorskHelsenett/ror/cmd/vulnerability/rabbitmq/msvulnerabilityrabbitmqdefinitions"
	"github.com/NorskHelsenett/ror/cmd/vulnerability/rabbitmq/msvulnerabilityrabbitmqhandler"
	"github.com/NorskHelsenett/ror/cmd/vulnerability/ror"
	"github.com/NorskHelsenett/ror/cmd/vulnerability/settings"
	"github.com/NorskHelsenett/ror/cmd/vulnerability/vulnerabilityconnections"
	"os"
	"os/signal"
	"syscall"

	"github.com/NorskHelsenett/ror/pkg/config/configconsts"
	"github.com/NorskHelsenett/ror/pkg/rlog"
	"github.com/NorskHelsenett/ror/pkg/telemetry/trace"
	"github.com/spf13/viper"
)

func main() {
	cancelChan := make(chan os.Signal, 1)
	stop := make(chan struct{})
	// catch SIGETRM or SIGINTERRUPT
	signal.Notify(cancelChan, syscall.SIGTERM, syscall.SIGINT)

	settings.Load()
	vulnerabilityconnections.InitConnections()
	ror.SetupRORClient()
	msvulnerabilityrabbitmqdefinitions.InitOrDie()

	if viper.GetBool(configconsts.ENABLE_TRACING) {
		go func() {
			trace.ConnectTracer(stop, "ror-vulnerability", viper.GetString(configconsts.OPENTELEMETRY_COLLECTOR_ENDPOINT))
			sig := <-cancelChan
			_, _ = fmt.Println()
			_, _ = fmt.Println(sig)
			stop <- struct{}{}
		}()
	}

	go func() {
		httpserver.InitHttpServer()
		sig := <-cancelChan
		_, _ = fmt.Println()
		_, _ = fmt.Println(sig)
		stop <- struct{}{}
	}()

	msvulnerabilityrabbitmqhandler.StartListening()

	sig := <-cancelChan
	rlog.Info("caught signal", rlog.Any("signal", sig))
}
