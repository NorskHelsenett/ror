// THIS FILE IS GENERATED, DO NOT EDIT
// ref: build/generator/main.go

package resourcescontroller

import (
	"net/http"
	"github.com/NorskHelsenett/ror/cmd/api/responses"
	resourcesservice "github.com/NorskHelsenett/ror/cmd/api/services/resourcesService"
	aclservice "github.com/NorskHelsenett/ror/internal/acl/services"
	
	"github.com/NorskHelsenett/ror/pkg/context/gincontext"
	aclmodels "github.com/NorskHelsenett/ror/pkg/models/acl"
	"github.com/NorskHelsenett/ror/pkg/apicontracts/apiresourcecontracts"

	"github.com/gin-gonic/gin"
)

// Get a list of cluster resources og given group/version/kind.
//
// @Summary	Get resources
// @Schemes
// @Description	Get a list of resources
// @Tags			resources
// @Accept			application/json
// @Produce		application/json
// @Param			ownerScope	query		aclmodels.Acl2Scope	true	"The kind of the owner, currently only support 'Cluster'"
// @Param			ownerSubject	query		string	true	"The name og the owner"
// @Param			apiversion	query		string	true	"ApiVersion"
// @Param			kind	query		string	true	"Kind"
// @Success		200		{array}		apiresourcecontracts.ResourceNode
// @Failure		403		{string}	Forbidden
// @Failure		401		{string}	Unauthorized
// @Failure		500		{string}	Failure	message
// @Router			/v1/resources [get]
// @Security		ApiKey || AccessToken
func GetResources() gin.HandlerFunc {
	return func(c *gin.Context) {
		ctx, cancel := gincontext.GetRorContextFromGinContext(c)
		defer cancel()

		query := apiresourcecontracts.NewResourceQueryFromClient(c)

		accessObject := aclservice.CheckAccessByOwnerref(ctx, query.Owner)
		if !accessObject.Read {
			c.JSON(http.StatusForbidden, "")
			return
		}

{{ range .}}
		if query.ApiVersion == "{{.GetApiVersion}}" && query.Kind == "{{.Kind}}" {
			resources, err := resourcesservice.GetResources[apiresourcecontracts.Resource{{.Kind}}](ctx, query)
			if err != nil {
				c.JSON(http.StatusNotFound, responses.Cluster{Status: http.StatusNotFound, Message: "error", Data: map[string]interface{}{"data": err.Error()}})
				return
			}
			c.JSON(http.StatusOK, resources)
		}
{{- end -}}
	}
}

// Get a cluster resources og given group/version/kind/uid.
//
// @Summary	Get resource
// @Schemes
// @Description	Get a resource by uid
// @Tags			resources
// @Accept			application/json
// @Produce		application/json
// @Param			uid	path		string	true	"The uid of the resource"
// @Param			ownerScope	query		aclmodels.Acl2Scope	true	"The kind of the owner, currently only support 'Cluster'"
// @Param			ownerSubject	query		string	true	"The name og the owner"
// @Param			apiversion	query		string	true	"ApiVersion"
// @Param			kind	query		string	true	"Kind"
// @Success		200		{array}		apiresourcecontracts.ResourceNode
// @Failure		403		{string}	Forbidden
// @Failure		401		{string}	Unauthorized
// @Failure		500		{string}	Failure	message
// @Router			/v1/resource/uid/{uid} [get]
// @Security		ApiKey || AccessToken
func GetResource() gin.HandlerFunc {
	return func(c *gin.Context) {
		ctx, cancel := gincontext.GetRorContextFromGinContext(c)
		defer cancel()

		if c.Param("uid") == "" {
			c.JSON(http.StatusBadRequest, "")
			return
		}

		query := apiresourcecontracts.ResourceQuery{
			Owner: apiresourcecontracts.ResourceOwnerReference{
				Scope:   aclmodels.Acl2Scope(c.Query("ownerScope")),
				Subject: c.Query("ownerSubject"),
			},
			Kind:       c.Query("kind"),
			ApiVersion: c.Query("apiversion"),
			Uid:        c.Param("uid"),
		}

		accessObject := aclservice.CheckAccessByOwnerref(ctx, query.Owner)
		if !accessObject.Read {
			c.JSON(http.StatusForbidden, "")
			return
		}

{{ range .}}
		if query.ApiVersion == "{{.GetApiVersion}}" && query.Kind == "{{.Kind}}" {
			resources, err := resourcesservice.GetResource[apiresourcecontracts.Resource{{.Kind}}](ctx, query)
			if err != nil {
				c.JSON(http.StatusNotFound, responses.Cluster{Status: http.StatusNotFound, Message: "error", Data: map[string]interface{}{"data": err.Error()}})
				return
			}
			c.JSON(http.StatusOK, resources)
		}
{{- end -}}

	}
}
