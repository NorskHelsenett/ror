// THIS FILE IS GENERATED, DO NOT EDIT
// ref: build/generator/main.go

package resourcesservice

import (
	"context"
	"errors"
	"github.com/NorskHelsenett/ror/internal/mongodbrepo/repositories/resourcesmongodbrepo"
	"github.com/NorskHelsenett/ror/pkg/rlog"
	"github.com/NorskHelsenett/ror/pkg/apicontracts/apiresourcecontracts"
)


{{ range .}}
// Functions to get {{.PluralCapitalized}} by uid,ownerref
// The function is intended for use by internal functions
func Get{{.Kind}}ByUid(ctx context.Context, ownerref apiresourcecontracts.ResourceOwnerReference, uid string) (apiresourcecontracts.Resource{{.Kind}}, error) {
	if uid == "" {
		return apiresourcecontracts.Resource{{.Kind}}{}, errors.New("uid is empty")
	}
	query := apiresourcecontracts.ResourceQuery{
		Owner:      ownerref,
		Kind:       "{{.Kind}}",
		ApiVersion: "{{.GetApiVersion}}",
		Internal:   true,
		Uid:        uid,
	}

	resource, err := GetResource[apiresourcecontracts.Resource{{.Kind}}](ctx, query)
	if err != nil {
		rlog.Errorc(ctx, "could not get resource", err)
		return apiresourcecontracts.Resource{{.Kind}}{}, errors.New("could not get resource")
	}

	return resource, nil


}

{{end}}

{{ range .}}
// Functions to get {{.PluralCapitalized}} by ownerref
// The function is intended for use by internal functions
func Get{{.PluralCapitalized}}(ctx context.Context, ownerref apiresourcecontracts.ResourceOwnerReference) (apiresourcecontracts.Resource{{.PluralCapitalized}}, error) {
	var resources apiresourcecontracts.Resource{{.PluralCapitalized}}
	query := apiresourcecontracts.ResourceQuery{
		Owner:      ownerref,
		Kind:       "{{.Kind}}",
		ApiVersion: "{{.GetApiVersion}}",
	}
	resourceset, err := resourcesmongodbrepo.GetResourcesByQuery[apiresourcecontracts.Resource{{.Kind}}](ctx, query)
	resources.Owner = ownerref
	resources.{{.PluralCapitalized}} = resourceset
	if err != nil {
		return resources, errors.New("could not fetch resource {{.Kind}}")
	}
	return resources, nil
}

{{end}}

// Function to creates a resource by the 'apiresourcecontracts.ResourceUpdateModel'
func ResourceCreateService(ctx context.Context, resourceUpdate apiresourcecontracts.ResourceUpdateModel) error {
	var err error
{{ range .}}
	if resourceUpdate.ApiVersion == "{{.GetApiVersion}}" && resourceUpdate.Kind == "{{.Kind}}" {
		resource := resourcesmongodbrepo.MapToResourceModel[apiresourcecontracts.ResourceModel[apiresourcecontracts.Resource{{.Kind}}]](resourceUpdate)
		resource = filterIn{{.Kind}}(resource)
		err = resourcesmongodbrepo.CreateResource{{.Kind}}(resource, ctx)
		if err == nil {
			err = sendToMessageBus(ctx, resource, apiresourcecontracts.K8sActionAdd)
			if err != nil {
				rlog.Errorc(ctx, "could not send to message bus", err)
			}
		}
	}
{{end}}

	if err != nil {
		rlog.Errorc(ctx, "could not create resource", err)
		return err
	}

	return nil
	
}

// Function to update a resource by the 'apiresourcecontracts.ResourceUpdateModel' struct
func ResourceUpdateService(ctx context.Context, resourceUpdate apiresourcecontracts.ResourceUpdateModel) error {
	var err error
{{ range .}}
	if resourceUpdate.ApiVersion == "{{.GetApiVersion}}" && resourceUpdate.Kind == "{{.Kind}}" {
		resource := resourcesmongodbrepo.MapToResourceModel[apiresourcecontracts.ResourceModel[apiresourcecontracts.Resource{{.Kind}}]](resourceUpdate)
		resource = filterIn{{.Kind}}(resource)
		err = resourcesmongodbrepo.UpdateResource{{.Kind}}(resource, ctx)
		if err == nil {
			err = sendToMessageBus(ctx, resource, apiresourcecontracts.K8sActionUpdate)
			if err != nil {
				rlog.Errorc(ctx, "could not send to message bus", err)
			}
		}
	}
{{end}}

	if err != nil {
		rlog.Errorc(ctx, "could not update resource", err)
		return err
	}

	return nil
}