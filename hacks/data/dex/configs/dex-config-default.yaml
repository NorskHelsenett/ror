# The base path of dex and the external name of the OpenID Connect service.
# This is the canonical URL that all clients MUST use to refer to dex. If a
# path is provided, dex's HTTP service will listen at a non-root URL.
issuer: http://localhost:5556/dex

# The storage configuration determines where dex stores its state. Supported
# options include SQL flavors and Kubernetes third party resources.
#
# See the storage document at Documentation/storage.md for further information.
storage:
  type: sqlite3
  config:
    file: dbs/dex.db

# Configuration for the HTTP endpoints.
web:
  http: 0.0.0.0:5556
  # Uncomment for HTTPS options.
  # https: 127.0.0.1:5554
  # tlsCert: /etc/dex/tls.crt
  # tlsKey: /etc/dex/tls.key
  allowedOrigins:
    - "http://localhost:10000"
    - "http://127.0.0.1:10000"
    - "http://localhost:11000"
    - "http://127.0.0.1:11000"
    - "http://localhost:11100"
    - "http://127.0.0.1:11100"

# Configuration for dex appearance
# frontend:
#   issuer: dex
#   logoURL: theme/logo.png
#   dir: web/
#   theme: light

# Configuration for telemetry
#telemetry:
#  http: 0.0.0.0:5558

# Uncomment this block to enable the gRPC API. This values MUST be different
# from the HTTP endpoints.
# grpc:
#   addr: 127.0.0.1:5557
#  tlsCert: examples/grpc-client/server.crt
#  tlsKey: examples/grpc-client/server.key
#  tlsClientCA: /etc/dex/client.crt
grpc:
  addr: 0.0.0.0:5557

# Uncomment this block to enable configuration for the expiration time durations.
# expiry:
#   signingKeys: "6h"
#   idTokens: "24h"

# Options for controlling the logger.
logger:
  level: "debug"
  format: "json"
#   format: "text" # can also be "json"

# Uncomment this block to control which response types dex supports. For example
# the following response types enable the implicit flow for web-only clients.
# Defaults to ["code"], the code flow.
oauth2:
  responseTypes: ["code", "token", "id_token"]
  skipApprovalScreen: true

# Instead of reading from an external storage, use this list of clients.
#
# If this option isn't chosen clients may be added through the gRPC API.
staticClients:
# - id: ror.sky.nhn.no
#   redirectURIs:
#   - 'http://localhost:31337/auth/callback'
#   name: 'ROR-Admin'
#   secret: ZXhhbXBsZS1hcHAtc2VjcmV0
- id: ror.sky.test.nhn.no
  name: ror.sky.test.nhn.no
  redirectURIs:
  - https://ror.sky.test.nhn.no/auth/callback
  - http://localhost:11000/auth/callback
  - http://127.0.0.1:11000/auth/callback
  - http://localhost:11100/api/auth/callback/dex
  - http://127.0.0.1:11100/api/auth/callback/dex
  secret: VQEj6sMwgxPsa8t9
  scopes: [openid profile email groups offline_access]
- id: rorwebapp
  name: rorwebapp
  redirectURIs:
  - https://ror.sky.test.nhn.no/auth/callback
  - http://localhost:11000/auth/callback
  - http://127.0.0.1:11000/auth/callback
  - http://localhost:11100/api/auth/callback/dex
  - http://127.0.0.1:11100/api/auth/callback/dex
  secret: VQEj6sMwgxPsa8t9
  scopes: [openid profile email groups offline_access]
- id: ror-cli
  name: 'ROR CLI'
  redirectURIs:
  - /device/callback
  public: true
  scopes: [openid profile email groups offline_access]


connectors:
# - type: mockCallback
#   id: mock
#   name: Example
# - type: oidc
#   id: google
#   name: Google
#   config:
#     issuer: https://accounts.google.com
#     # Connector config values starting with a "$" will read from the environment.
#     clientID: 
#     clientSecret: 
#     redirectURI: http://127.0.0.1:5556/dex/callback
#     hostedDomains:
#     - 
- type: ldap
  name: OpenLDAP
  id: ldap
  config:
    # The following configurations seem to work with OpenLDAP:
    #
    # 1) Plain LDAP, without TLS:
    host: openldap:389
    insecureNoSSL: true
    #
    # 2) LDAPS without certificate validation:
    #host: localhost:636
    #insecureNoSSL: false
    #insecureSkipVerify: true
    #
    # 3) LDAPS with certificate validation:
    #host: YOUR-HOSTNAME:636
    #insecureNoSSL: false
    #insecureSkipVerify: false
    #rootCAData: 'CERT'
    # ...where CERT="$( base64 -w 0 your-cert.crt )"

    # This would normally be a read-only user.
    bindDN: cn=admin,dc=ror,dc=dev
    bindPW: admin

    usernamePrompt: Email Address

    userSearch:
      baseDN: ou=People,dc=ror,dc=dev
      filter: "(objectClass=person)"
      username: mail
      # "DN" (case sensitive) is a special attribute name. It indicates that
      # this value should be taken from the entity's DN not an attribute on
      # the entity.
      idAttr: DN
      emailAttr: mail
      nameAttr: cn

    groupSearch:
      baseDN: ou=Groups,dc=ror,dc=dev
      filter: "(objectClass=groupOfNames)"

      userMatchers:
        # A user is a member of a group when their DN matches
        # the value of a "member" attribute on the group entity.
      - userAttr: DN
        groupAttr: member

      # The group name should be the "cn" value.
      nameAttr: cn


# Let dex keep a list of passwords which can be used to login to dex.
#enablePasswordDB: true

# A static list of passwords to login the end user. By identifying here, dex
# won't look in its underlying storage for passwords.
#
# If this option isn't chosen users may be added through the gRPC API.
# staticPasswords:
# - email: "admin@example.com"
#   # bcrypt hash of the string "password"
#   hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
#   username: "admin"
#   userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
